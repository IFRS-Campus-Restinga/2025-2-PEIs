# Generated by Django 5.2.5 on 2025-10-09 12:16

import django.core.validators
import django.db.models.deletion
import pei.managers.arquivo
import pei.models.ataDeAcompanhamento
import pei.models.professor
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Aluno',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(7), django.core.validators.MaxLengthValidator(60), django.core.validators.RegexValidator(message='Não use caracteres especiais. Use apenas letras, números e espaços.', regex='^[\\w\\sÀ-ÿ]+$')])),
                ('matricula', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^\\d+$', 'A matrícula deve conter apenas números')])),
                ('email', models.EmailField(max_length=254, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AtaDeAcompanhamento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dataReuniao', models.DateTimeField(validators=[pei.models.ataDeAcompanhamento.validaDataFutura], verbose_name='Data da Reunião')),
                ('participantes', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(5), django.core.validators.MaxLengthValidator(100)])),
                ('descricao', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(5), django.core.validators.MaxLengthValidator(100)])),
                ('ator', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(5), django.core.validators.MaxLengthValidator(100)])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CoordenadorCurso',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(7), django.core.validators.MaxLengthValidator(60), django.core.validators.RegexValidator(message='Não use caracteres especiais. Use apenas letras, números e espaços.', regex='^[\\w\\sÀ-ÿ]+$')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Disciplina',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.RegexValidator(message='Não use caracteres especiais. Use apenas letras, números e espaços.', regex='^[\\w\\sÀ-ÿ]+$')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DocumentacaoComplementar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('autor', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(5), django.core.validators.MaxLengthValidator(100), django.core.validators.RegexValidator(message='Não use caracteres especiais. Use apenas letras, números e espaços.', regex='^[\\w\\sÀ-ÿ]+$')])),
                ('tipo', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(5), django.core.validators.MaxLengthValidator(100)])),
                ('caminho', models.CharField(max_length=255, validators=[django.core.validators.MinLengthValidator(5), django.core.validators.MaxLengthValidator(255)])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Napne',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(7), django.core.validators.MaxLengthValidator(60), django.core.validators.RegexValidator(message='Não use caracteres especiais. Use apenas letras, números e espaços.', regex='^[\\w\\sÀ-ÿ]+$')])),
                ('email', models.EmailField(max_length=254, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Pedagogo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(7), django.core.validators.MaxLengthValidator(100), django.core.validators.RegexValidator(message='Não use caracteres especiais. Use apenas letras, números e espaços.', regex='^[\\w\\sÀ-ÿ]+$')])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PeiCentral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('historico_do_aluno', models.TextField(help_text='Histórico do aluno', validators=[django.core.validators.MinLengthValidator(200)], verbose_name='Histórico Escolar')),
                ('necessidades_educacionais_especificas', models.TextField(help_text='Detalhar as condições do estudante o que ele necessita. Ex: Se o estudante é cego: sua condição é: cegueira. Precisa de: Braille, Leitor de telas...', validators=[django.core.validators.MinLengthValidator(50)], verbose_name='Necessidades Educacionais Especificas')),
                ('habilidades', models.TextField(help_text='Conhecimentos, Habilidades, Capacidades, Interesses, Necessidades (O que sabe? Do que gosta/afinidades?...)', validators=[django.core.validators.MinLengthValidator(50)], verbose_name='Afinidades (habilidades, conhecimentos ...)')),
                ('dificuldades_apresentadas', models.TextField(help_text='Dificuldades apresentadas', validators=[django.core.validators.MinLengthValidator(30)], verbose_name='Dificuldades apresentadas')),
                ('adaptacoes', models.TextField(blank=True, help_text='Adaptações Razoáveis e/ou Acessibilidades Curriculares', verbose_name='Adaptações Razoáveis e/ou Acessibilidades Curriculares')),
                ('status_pei', models.CharField(choices=[('ABERTO', 'Aberto'), ('EM ANDAMENTO', 'Em Andamento'), ('FECHADO', 'Concluído')], help_text='Status Atual', max_length=15, verbose_name='Status')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=150)),
                ('matricula', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^\\d+$', 'A matrícula deve conter apenas números')])),
                ('email', models.EmailField(max_length=254, unique=True, validators=[pei.models.professor.validar_email_institucional])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Curso',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.RegexValidator(message='Não use caracteres especiais. Use apenas letras, números e espaços.', regex='^[\\w\\sÀ-ÿ]+$')])),
                ('nivel', models.CharField(choices=[('Superior', 'Superior'), ('Ensino Médio', 'Ensino Medio'), ('Não informado', 'Não informado')], default='Não informado', max_length=100, validators=[django.core.validators.MinLengthValidator(1)])),
                ('arquivo', models.FileField(blank=True, null=True, upload_to='cursos/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'docx', 'png', 'jpg']), pei.managers.arquivo.validate_file_size])),
                ('coordenador', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='coordenador', to='pei.coordenadorcurso')),
                ('disciplinas', models.ManyToManyField(blank=True, related_name='cursos', to='pei.disciplina')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PEIPeriodoLetivo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_criacao', models.DateField()),
                ('data_termino', models.DateField()),
                ('periodo', models.CharField(choices=[('BIMESTRE', 'Bimestre'), ('TRIMESTRE', 'Trimestre'), ('SEMESTRE', 'Semestre')], default='SEMESTRE', max_length=100)),
                ('periodo_principal', models.CharField(blank=True, max_length=10, null=True)),
                ('pei_central', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='periodos', to='pei.peicentral')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComponenteCurricular',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('objetivos', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(7), django.core.validators.MaxLengthValidator(100), django.core.validators.RegexValidator(message='Não use caracteres especiais. Use apenas letras, números e espaços.', regex='^[\\w\\sÀ-ÿ]+$')])),
                ('conteudo_prog', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(1), django.core.validators.MaxLengthValidator(3)])),
                ('metodologia', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(7), django.core.validators.MaxLengthValidator(255)])),
                ('disciplinas', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='componentes_curriculares', to='pei.disciplina')),
                ('periodo_letivo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pareceres', to='pei.peiperiodoletivo')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Parecer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('texto', models.TextField(help_text='Tu tem 1000 caracteres para escrever')),
                ('data', models.DateField(auto_now_add=True)),
                ('componente_curricular', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pareceres', to='pei.componentecurricular')),
                ('professor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pareceres', to='pei.professor')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
